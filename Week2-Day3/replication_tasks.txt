Objective:
Create a stored procedure that inserts rental data on the primary server, and verify that changes replicate to the standby server. Add a logging mechanism to track each operation.

Tasks to Complete:
Set up streaming replication (if not already done):

terminal code:


Primary on port 5433

initdb -D "D:/pri"

pg_ctl -D D:\pri -o "-p 5433" -l d:\pri\logfile start

psql -p 5433 -d postgres -c "CREATE ROLE replicator with REPLICATION LOGIN PASSWORD 'repl_pass';

pg_basebackup -D d:\sec -Fp -Xs -P -R -h 127.0.0.1 -U replicator -p 5433

psql -p 5433 -d postgres 

select * from pg_stat_replication;


Standby on port 5435

initdb -D "D:/sec"

pg_ctl -D D:\sec -o "-p 5435" -l d:\sec\logfile start

psql -p 5435 -d postgres 

Create a table on the primary:

CREATE TABLE rental_log (
    log_id SERIAL PRIMARY KEY,
    rental_time TIMESTAMP,
    customer_id INT,
    film_id INT,
    amount NUMERIC,
    logged_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
Ensure this table is replicated.

Write a stored procedure to:

Insert a new rental log entry

Accept customer_id, film_id, amount as inputs

Wrap logic in a transaction with error handling (BEGIN...EXCEPTION...END)


CREATE OR REPLACE PROCEDURE sp_add_rental_log(
    p_customer_id INT,
    p_film_id INT,
    p_amount NUMERIC
)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO rental_log (rental_time, customer_id, film_id, amount)
    VALUES (CURRENT_TIMESTAMP, p_customer_id, p_film_id, p_amount);
EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE 'Error occurred: %', SQLERRM;
END;
$$;



Call the procedure on the primary :


CALL sp_add_rental_log(1, 100, 4.99);


On the standby (port 5435) :

Confirm that the new record appears in rental_log

Run:SELECT * FROM rental_log ORDER BY log_id DESC LIMIT 1;

Add a trigger to log any UPDATE to rental_log

CREATE TABLE rental_log_updates (
    id SERIAL PRIMARY KEY,
    column_name TEXT,
    old_value TEXT,
    new_value TEXT,
    time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE OR REPLACE FUNCTION update_audit_log()
RETURNS TRIGGER AS $$
DECLARE
    col_name TEXT := TG_ARGV[0];
    o_value TEXT;
    n_value TEXT;
BEGIN
    -- Get old and new values for the specified column
    EXECUTE FORMAT('SELECT ($1).%I::TEXT', col_name) INTO o_value USING OLD;
    EXECUTE FORMAT('SELECT ($1).%I::TEXT', col_name) INTO n_value USING NEW;

    -- If values are different, log the change
    IF o_value IS DISTINCT FROM n_value THEN
        INSERT INTO rental_log_updates(column_name, old_value, new_value)
        VALUES (col_name, o_value, n_value);
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER update_rental_time
AFTER UPDATE ON rental_log
FOR EACH ROW
EXECUTE FUNCTION update_audit_log('rental_time');

CREATE TRIGGER update_customer_id
AFTER UPDATE ON rental_log
FOR EACH ROW
EXECUTE FUNCTION update_audit_log('customer_id');

CREATE TRIGGER update_film_id
AFTER UPDATE ON rental_log
FOR EACH ROW
EXECUTE FUNCTION update_audit_log('film_id');

CREATE TRIGGER update_amount
AFTER UPDATE ON rental_log
FOR EACH ROW
EXECUTE FUNCTION update_audit_log('amount');


UPDATE rental_log 
SET amount = amount + 10 
WHERE log_id = 1;

UPDATE rental_log 
SET customer_id = 10 
WHERE log_id = 1;

UPDATE rental_log 
SET film_id = 11 
WHERE log_id = 1;

SELECT * FROM rental_log_updates;


