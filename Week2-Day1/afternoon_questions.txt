-- 1️⃣ Question:
-- In a transaction, if I perform multiple updates and an error happens in the third statement, but I have not used SAVEPOINT, what will happen if I issue a ROLLBACK?
-- Will my first two updates persist?

The first two updates does not takes places and the tables returns to the state that it were before the transact block

-- 2️⃣ Question:
-- Suppose Transaction A updates Alice’s balance but does not commit. Can Transaction B read the new balance if the isolation level is set to READ COMMITTED?

Since the level is read commited, no we cannot read the new balance that is done without commiting 

-- 3️⃣ Question:
-- What will happen if two concurrent transactions both execute:
-- UPDATE tbl_bank_accounts SET balance = balance - 100 WHERE account_name = 'Alice';
-- at the same time? Will one overwrite the other?
as soon as transact a performs update, postgre locks that values so update by transact b is not possible
lock is lifted only when transact a commits, only then transact b can perform the update

-- 4️⃣ Question:
-- If I issue ROLLBACK TO SAVEPOINT after_alice;, will it only undo changes made after the savepoint or everything?
it undos the changes made after the savepoint when ROLLBACK TO SAVEPOINT after_alice is performed 

-- 5️⃣ Question:
-- Which isolation level in PostgreSQL prevents phantom reads?
serializable

-- 6️⃣ Question:
-- Can Postgres perform a dirty read (reading uncommitted data from another transaction)?
No, postgres prevents dirty read by default

-- 7️⃣ Question:
-- If autocommit is ON (default in Postgres), and I execute an UPDATE, is it safe to assume the change is immediately committed?
yes it is commited immediately

-- 8️⃣ Question:
-- If I do this:
-- BEGIN;
-- UPDATE accounts SET balance = balance - 500 WHERE id = 1;
-- -- (No COMMIT yet)
-- And from another session, I run:
-- SELECT balance FROM accounts WHERE id = 1;
-- Will the second session see the deducted balance?

No, it does not, it will see the original balance before commiting
